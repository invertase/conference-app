def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def debugkeystoreProperties = new Properties()
def debugkeystorePropertiesFile = rootProject.file('debugkey.properties')
if (debugkeystorePropertiesFile.exists()) {
    debugkeystoreProperties.load(new FileInputStream(debugkeystorePropertiesFile))
}

def releasekeystoreProperties = new Properties()
def releasekeystorePropertiesFile = rootProject.file('releasekey.properties')
if (releasekeystorePropertiesFile.exists()) {
    releasekeystoreProperties.load(new FileInputStream(releasekeystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.fluttercon.app"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

   signingConfigs {
        debug {
           keyAlias debugkeystoreProperties['keyAlias']
           keyPassword debugkeystoreProperties['keyPassword']
           storeFile debugkeystoreProperties['storeFile'] ? file(debugkeystoreProperties['storeFile']) : null
           storePassword debugkeystoreProperties['storePassword']
       }
       release {
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["CM_KEY_ALIAS"]
                keyPassword System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias releasekeystoreProperties['keyAlias']
                keyPassword releasekeystoreProperties['keyPassword']
                storeFile releasekeystoreProperties['storeFile'] ? file(releasekeystoreProperties['storeFile']) : null
                storePassword releasekeystoreProperties['storePassword']
            }
       }
   }
   
   buildTypes {
        debug {
           signingConfig signingConfigs.debug
       }
       release {
           signingConfig signingConfigs.release
       }
   }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
